/**
 * HTML elements that support the Constraint Validation API.
 *
 * Here, we exclude HTMLButtonElement because although it does technically support the API,
 * normal buttons are actually exempted from any validation.
 * @see https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Forms/Form_validation
 * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/willValidate
 */
type ValidityTarget = HTMLFieldSetElement | HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;
export declare const ControlWithError: import("react").ForwardRefExoticComponent<{
    /**
     * Whether the control is required.
     */
    required?: boolean;
    /**
     * Label the control as "optional" when _not_ `required`, instead of the inverse.
     */
    markWhenOptional?: boolean;
    /**
     * A function that returns a custom validity message when applicable.
     *
     * This message will be applied to the element returned by `getValidityTarget`.
     * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/setCustomValidity
     */
    customValidator?: () => string | void;
    /**
     * A function that returns the actual element on which the validity data should be applied.
     */
    getValidityTarget: () => ValidityTarget | null | undefined;
    /**
     * The control component to apply validation to.
     */
    children: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>;
} & import("react").RefAttributes<HTMLDivElement>>;
export {};
//# sourceMappingURL=control-with-error.d.ts.map