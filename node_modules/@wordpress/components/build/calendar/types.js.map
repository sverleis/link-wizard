{"version":3,"names":[],"sources":["@wordpress/components/src/calendar/types.ts"],"sourcesContent":["/**\n * External dependencies\n */\nimport type { Locale } from 'date-fns';\nimport type * as React from 'react';\n\n/**\n * Represents the modifiers that match a specific day in the calendar.\n * @example\n *   const modifiers: Modifiers = {\n *   today: false, // the day is not today\n *   selected: true, // the day is selected\n *   disabled: false, // the day is not disabled\n *   outside: false, // the day is not outside the month\n *   focused: false, // the day is not focused\n *\n *   weekend: false // custom modifier example for matching a weekend\n *   booked: true // custom modifier example for matching a booked day\n *   available: false // custom modifier example for matching an available day\n *   };\n */\nexport type Modifiers = Record< string, boolean >;\n\n/**\n * A value or a function that matches a specific day.\n * @example\n *   // will always match the day\n *   const booleanMatcher: Matcher = true;\n *\n *   // will match the today's date\n *   const dateMatcher: Matcher = new Date();\n *\n *   // will match the days in the array\n *   const arrayMatcher: Matcher = [\n *     new Date(2019, 1, 2),\n *     new Date(2019, 1, 4)\n *   ];\n *\n *   // will match days after the 2nd of February 2019\n *   const afterMatcher: DateAfter = { after: new Date(2019, 1, 2) };\n *\n *   // will match days before the 2nd of February 2019 }\n *   const beforeMatcher: DateBefore = { before: new Date(2019, 1, 2) };\n *\n *   // will match Sundays\n *   const dayOfWeekMatcher: DayOfWeek = {\n *     dayOfWeek: 0\n *   };\n *\n *   // will match the included days, except the two dates\n *   const intervalMatcher: DateInterval = {\n *     after: new Date(2019, 1, 2),\n *     before: new Date(2019, 1, 5)\n *   };\n *\n *   // will match the included days, including the two dates\n *   const rangeMatcher: DateRange = {\n *     from: new Date(2019, 1, 2),\n *     to: new Date(2019, 1, 5)\n *   };\n *\n *   // will match when the function return true\n *   const functionMatcher: Matcher = (day: Date) => {\n *     return day.getMonth() === 2; // match when month is March\n *   };\n */\ntype Matcher =\n\t| boolean\n\t| ( ( date: Date ) => boolean )\n\t| Date\n\t| Date[]\n\t| DateRange\n\t| DateBefore\n\t| DateAfter\n\t| DateInterval\n\t| DayOfWeek;\n/**\n * Match a day falling after the specified date, with the date not included.\n * @example\n *   // Match days after the 2nd of February 2019\n *   const matcher: DateAfter = { after: new Date(2019, 1, 2) };\n */\ntype DateAfter = {\n\tafter: Date;\n};\n/**\n * Match a day falling before the specified date, with the date not included.\n * @example\n *   // Match days before the 2nd of February 2019\n *   const matcher: DateBefore = { before: new Date(2019, 1, 2) };\n */\ntype DateBefore = {\n\tbefore: Date;\n};\n/**\n * An interval of dates. Differently from `DateRange`, the range ends here\n * are not included.\n * @example\n *   // Match the days between the 2nd and the 5th of February 2019\n *   const matcher: DateInterval = {\n *     after: new Date(2019, 1, 2),\n *     before: new Date(2019, 1, 5)\n *   };\n */\ntype DateInterval = {\n\tbefore: Date;\n\tafter: Date;\n};\n/**\n * A range of dates. The range can be open. Differently from\n * `DateInterval`, the range ends here are included.\n * @example\n *   // Match the days between the 2nd and the 5th of February 2019\n *   const matcher: DateRange = {\n *     from: new Date(2019, 1, 2),\n *     to: new Date(2019, 1, 5)\n *   };\n */\nexport type DateRange = {\n\tfrom: Date | undefined;\n\tto?: Date | undefined;\n};\n/**\n * Match dates being one of the specified days of the week (`0-6`, where `0` is\n * Sunday).\n * @example\n *   // Match Sundays\n *   const matcher: DayOfWeek = { dayOfWeek: 0 };\n *   // Match weekends\n *   const matcher: DayOfWeek = { dayOfWeek: [0, 6] };\n */\ntype DayOfWeek = {\n\tdayOfWeek: number | number[];\n};\n\n/**\n * Shared handler type for `onSelect` callback when a selection mode is set.\n * @example\n *   const handleSelect: OnSelectHandler<Date> = (\n *     selected,\n *     triggerDate,\n *     modifiers,\n *     e\n *   ) => {\n *     console.log( \"Selected:\", selected );\n *     console.log( \"Triggered by:\", triggerDate );\n *   };\n * @template T - The type of the selected item.\n * @callback OnSelectHandler\n * @param {T}                                      selected    - The selected item after the event.\n * @param {Date}                                   triggerDate - The date when the event was triggered. This is\n *                                                             typically the day clicked or interacted with.\n * @param {Modifiers}                              modifiers   - The modifiers associated with the event.\n * @param {React.MouseEvent | React.KeyboardEvent} e           - The event object.\n */\nexport type OnSelectHandler< T > = (\n\tselected: T,\n\ttriggerDate: Date,\n\tmodifiers: Modifiers,\n\te: React.MouseEvent | React.KeyboardEvent\n) => void;\n\nexport interface BaseProps\n\textends Omit<\n\t\tReact.HTMLAttributes< HTMLDivElement >,\n\t\t'onSelect' | 'defaultValue'\n\t> {\n\t/**\n\t * Whether the selection is required.\n\t * When `true`, there always needs to be a date selected.\n\t * @default false\n\t */\n\trequired?: boolean;\n\n\t/**\n\t * The initial month to show in the calendar view (uncontrolled).\n\t * @default The current month\n\t */\n\tdefaultMonth?: Date;\n\t/**\n\t * The month displayed in the calendar view (controlled). Use together with\n\t * `onMonthChange` to change the month programmatically.\n\t */\n\tmonth?: Date;\n\t/**\n\t * The number of months displayed at once.\n\t * @default 1\n\t */\n\tnumberOfMonths?: number;\n\t/**\n\t * The earliest month to start the month navigation.\n\t */\n\tstartMonth?: Date;\n\t/**\n\t * The latest month to end the month navigation.\n\t */\n\tendMonth?: Date;\n\t/**\n\t * Focus the first selected day (if set) or today's date (if not disabled).\n\t *\n\t * Use this prop when you need to focus the calendar after a user action\n\t * (e.g. opening the dialog with the calendar).\n\t */\n\tautoFocus?: boolean;\n\t/**\n\t * Specify which days are disabled. Using `true` will disable all dates.\n\t */\n\tdisabled?: Matcher | Matcher[] | undefined;\n\t/**\n\t * Disable the navigation buttons.\n\t */\n\tdisableNavigation?: boolean;\n\t/**\n\t * Use custom labels, useful for translating the component.\n\t *\n\t * For a correct localized experience, consumers should make sure the locale\n\t * used for the translated labels and `locale` prop are consistent.\n\t */\n\tlabels?: {\n\t\t/**\n\t\t * The label for the navigation toolbar.\n\t\t * @default \"\"\n\t\t */\n\t\tlabelNav?: () => string;\n\t\t/**\n\t\t * The label for the month grid.\n\t\t * @default \"LLLL y\" (e.g. \"November 2022\")\n\t\t */\n\t\tlabelGrid?: ( date: Date ) => string;\n\t\t/**\n\t\t * The label for the gridcell, when the calendar is not interactive.\n\t\t * @default The formatted date.\n\t\t */\n\t\tlabelGridcell?: ( date: Date, modifiers?: Modifiers ) => string;\n\t\t/**\n\t\t * The label for the \"next month\" button.\n\t\t * @default \"Go to the Next Month\"\n\t\t */\n\t\tlabelNext?: ( month: Date | undefined ) => string;\n\t\t/**\n\t\t * The label for the \"previous month\" button.\n\t\t * @default \"Go to the Previous Month\"\n\t\t */\n\t\tlabelPrevious?: ( month: Date | undefined ) => string;\n\t\t/**\n\t\t * The label for the day button.\n\t\t * @default The formatted date.\n\t\t */\n\t\tlabelDayButton?: ( date: Date, modifiers?: Modifiers ) => string;\n\t\t/**\n\t\t * The label for the weekday.\n\t\t * @default ( date: Date ) => \"Monday\" | \"Tuesday\" | \"Wednesday\" | \"Thursday\" | \"Friday\" | \"Saturday\" | \"Sunday\"\n\t\t */\n\t\tlabelWeekday?: ( date: Date ) => string;\n\t};\n\n\t/**\n\t * The locale object used to localize dates. Pass a locale from\n\t * `@date-fns/locale` to localize the calendar.\n\t *\n\t * For a correct localized experience, consumers should make sure the locale\n\t * used for the translated labels and `locale` prop are consistent.\n\t * @see https://github.com/date-fns/date-fns/tree/main/src/locale for a list of the supported locales\n\t * @default The `enUS` locale from `@date-fns/locale`\n\t */\n\tlocale?: Locale;\n\t/**\n\t * The index of the first day of the week (0 - Sunday). Overrides the locale's\n\t * one.\n\t * @default Based on the `locale` prop\n\t */\n\tweekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | undefined;\n\t/**\n\t * Event fired when the user navigates between months.\n\t */\n\tonMonthChange?: ( month: Date ) => void;\n\t/**\n\t * The time zone (IANA or UTC offset) to use in the calendar.\n\t *\n\t * See\n\t * [Wikipedia](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)\n\t * for the possible values.\n\t *\n\t * When working with time zones, use the `TZDate` object exported by this\n\t * package instead of the native `Date` object.\n\t * @example\n\t *   import { DateCalendar, TZDate } from \"@wordpress/components\";\n\t *\n\t *   export function WithTimeZone() {\n\t *     const timeZone = \"America/New_York\";\n\t *     const [ selected, setSelected ] = useState< Date | undefined >(\n\t *       new TZDate( 2024, 12, 10, timeZone ) // Use `TZDate` instead of `Date`\n\t *     );\n\t *     return (\n\t *       <DateCalendar\n\t *         timeZone={ timeZone }\n\t *         selected={ selected }\n\t *         onSelect={ setSelected }\n\t *     />\n\t *   );\n\t * }\n\t */\n\ttimeZone?: string;\n\t/**\n\t * The role attribute to add to the container element.\n\t * @default 'application'\n\t */\n\trole?: 'application' | 'dialog' | undefined;\n}\n\ninterface SingleProps {\n\t/** The selected date. */\n\tselected?: Date | undefined | null;\n\t/** Event handler when a day is selected. */\n\tonSelect?: OnSelectHandler< Date | undefined >;\n\t/** The default selected date (for uncontrolled usage). */\n\tdefaultSelected?: Date;\n}\n\ninterface RangeProps {\n\t/**\n\t * When `true`, the range will reset when including a disabled day.\n\t */\n\texcludeDisabled?: boolean;\n\t/**\n\t * The minimum number of nights to include in the range.\n\t */\n\tmin?: number;\n\t/**\n\t * The maximum number of nights to include in the range.\n\t */\n\tmax?: number;\n\t/** The selected range. */\n\tselected?: DateRange | undefined | null;\n\t/** Event handler when the selection changes. */\n\tonSelect?: OnSelectHandler< DateRange | undefined >;\n\t/** The default selected range (for uncontrolled usage). */\n\tdefaultSelected?: DateRange;\n}\n\nexport type DateCalendarProps = BaseProps & SingleProps;\nexport type DateRangeCalendarProps = BaseProps & RangeProps;\n"],"mappings":"","ignoreList":[]}