"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValidatedToggleControl = void 0;
var _element = require("@wordpress/element");
var _compose = require("@wordpress/compose");
var _controlWithError = require("../control-with-error");
var _toggleControl = _interopRequireDefault(require("../../toggle-control"));
var _jsxRuntime = require("react/jsx-runtime");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

// TODO: Should we customize the default `missingValue` message? It says to "check this box".

const UnforwardedValidatedToggleControl = ({
  required,
  customValidator,
  onChange,
  markWhenOptional,
  ...restProps
}, forwardedRef) => {
  const validityTargetRef = (0, _element.useRef)(null);
  const mergedRefs = (0, _compose.useMergeRefs)([forwardedRef, validityTargetRef]);
  const valueRef = (0, _element.useRef)(restProps.checked);

  // TODO: Upstream limitation - The `required` attribute is not passed down to the input,
  // so we need to set it manually.
  (0, _element.useEffect)(() => {
    if (validityTargetRef.current) {
      validityTargetRef.current.required = required !== null && required !== void 0 ? required : false;
    }
  }, [required]);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_controlWithError.ControlWithError, {
    required: required,
    markWhenOptional: markWhenOptional,
    customValidator: () => {
      return customValidator?.(valueRef.current);
    },
    getValidityTarget: () => validityTargetRef.current,
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_toggleControl.default, {
      __nextHasNoMarginBottom: true,
      ref: mergedRefs,
      onChange: value => {
        valueRef.current = value;
        onChange?.(value);
      },
      ...restProps
    })
  });
};
const ValidatedToggleControl = exports.ValidatedToggleControl = (0, _element.forwardRef)(UnforwardedValidatedToggleControl);
//# sourceMappingURL=toggle-control.js.map