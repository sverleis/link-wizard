/**
 * WordPress dependencies
 */
import { forwardRef, useRef } from '@wordpress/element';
import { useMergeRefs } from '@wordpress/compose';

/**
 * Internal dependencies
 */
import { ControlWithError } from '../control-with-error';
import NumberControl from '../../number-control';
import { jsx as _jsx } from "react/jsx-runtime";
const UnforwardedValidatedNumberControl = ({
  required,
  customValidator,
  onChange,
  markWhenOptional,
  ...restProps
}, forwardedRef) => {
  const validityTargetRef = useRef(null);
  const mergedRefs = useMergeRefs([forwardedRef, validityTargetRef]);
  const valueRef = useRef(restProps.value);
  return /*#__PURE__*/_jsx(ControlWithError, {
    required: required,
    markWhenOptional: markWhenOptional,
    customValidator: () => {
      return customValidator?.(valueRef.current);
    },
    getValidityTarget: () => validityTargetRef.current,
    children: /*#__PURE__*/_jsx(NumberControl, {
      __next40pxDefaultSize: true,
      ref: mergedRefs
      // TODO: Upstream limitation - When form is submitted when value is undefined, it will
      // automatically set a clamped value (as defined by `min` attribute, so 0 by default).
      ,
      onChange: (value, ...args) => {
        valueRef.current = value;
        onChange?.(value, ...args);
      },
      ...restProps
    })
  });
};
export const ValidatedNumberControl = forwardRef(UnforwardedValidatedNumberControl);
//# sourceMappingURL=number-control.js.map